#!/usr/bin/env bash
# Dynamically map custom domains to your current host IP via dnsmasq on macOS.
# - Supports multiple domains and wildcard subdomains.
# - Creates/updates /etc/resolver/<domain> to use 127.0.0.1 (per-domain DNS).
# - Writes/cleans dnsmasq snippets and reloads the service.

set -euo pipefail

# Domains to manage. Pass as args, or set DOMAINS env (space-separated), or defaults to k8s.rancher.private
if [[ $# -gt 0 ]]; then
  read -r -a DOMAINS <<<"$*"
elif [[ -n "${DOMAINS:-}" ]]; then
  read -r -a DOMAINS <<<"${DOMAINS}"
else
  DOMAINS=("k8s.rancher.private")
fi

brew_bin="$(command -v brew || true)"
if [[ -z "${brew_bin}" ]]; then
  echo "Homebrew not found. Install from https://brew.sh first." >&2
  exit 1
fi

if ! "${brew_bin}" list dnsmasq >/dev/null 2>&1; then
  echo "Installing dnsmasq via Homebrew..."
  "${brew_bin}" install dnsmasq
fi

# Determine brew prefix and dnsmasq conf dir (Apple Silicon vs Intel)
BREW_PREFIX="$(${brew_bin} --prefix)"
DNSMASQ_ETC="${BREW_PREFIX}/etc"
DNSMASQ_SNIPPETS_DIR="${DNSMASQ_ETC}/dnsmasq.d"
sudo mkdir -p "${DNSMASQ_SNIPPETS_DIR}"

# Detect primary IP (prefers route src, falls back to en0/en1)
IP="$(route -n get 1.1.1.1 2>/dev/null | awk '/src:/{print $2}')"
if [[ -z "${IP}" ]]; then
  IP="$(ipconfig getifaddr en0 2>/dev/null || true)"
fi
if [[ -z "${IP}" ]]; then
  IP="$(ipconfig getifaddr en1 2>/dev/null || true)"
fi
if [[ -z "${IP}" ]]; then
  echo "Could not determine local IP. Are you connected to a network?" >&2
  exit 2
fi

# Optional: detect Tailscale IP for LAN-agnostic deployments
TS_IP=""
if command -v tailscale >/dev/null 2>&1; then
  TS_IP="$(tailscale ip -4 2>/dev/null | head -n1 || true)"
fi

# Ensure dnsmasq listens on localhost and LAN (and tailscale if present)
DNSMASQ_CONF="${DNSMASQ_ETC}/dnsmasq.conf"
MANAGED_BEGIN="# BEGIN managed by update-k8s-rancher-dns.sh"
MANAGED_END="# END managed by update-k8s-rancher-dns.sh"
{
  echo "${MANAGED_BEGIN}"
  echo "conf-dir=${DNSMASQ_SNIPPETS_DIR},*.conf"
  LISTEN="127.0.0.1,${IP}"
  if [[ -n "${TS_IP}" ]]; then LISTEN="${LISTEN},${TS_IP}"; fi
  echo "listen-address=${LISTEN}"
  echo "bind-interfaces"
  echo "${MANAGED_END}"
} | sudo awk -v b="${MANAGED_BEGIN}" -v e="${MANAGED_END}" '
  BEGIN{printed=0}
  { if ($0==b) inblk=1; if (!inblk) print; if ($0==e) {inblk=0; printed=1} }
  END{ if (!printed) print }
' - "${DNSMASQ_CONF}" > /tmp/dnsmasq.conf.tmp && sudo mv /tmp/dnsmasq.conf.tmp "${DNSMASQ_CONF}"
echo "Updated ${DNSMASQ_CONF} listen-address to 127.0.0.1, ${IP}${TS_IP:+, ${TS_IP}}"

CONF_FILE="${DNSMASQ_SNIPPETS_DIR}/lan-wildcards.conf"
# Clean up legacy per-domain snippets that may contain stale IPs (from older script versions)
for DOMAIN in "${DOMAINS[@]}"; do
  for f in "${DNSMASQ_SNIPPETS_DIR}"/*.conf; do
    [[ -e "$f" ]] || continue
    if sudo grep -q "${DOMAIN}" "$f" && [[ "$f" != "$CONF_FILE" ]]; then
      echo "Removing legacy snippet with ${DOMAIN}: $f"
      sudo rm -f "$f"
    fi
  done
done

{
  echo "# Auto-generated by update-k8s-rancher-dns.sh"
  for DOMAIN in "${DOMAINS[@]}"; do
    echo "address=/.${DOMAIN}/${IP}"
    echo "address=/${DOMAIN}/${IP}"
  done
} | sudo tee "${CONF_FILE}" >/dev/null
echo "Wrote ${CONF_FILE} with ${IP} for domains: ${DOMAINS[*]}"

# Ensure macOS routes the domains to dnsmasq via per-domain resolvers
sudo mkdir -p /etc/resolver
for DOMAIN in "${DOMAINS[@]}"; do
  echo "nameserver 127.0.0.1" | sudo tee "/etc/resolver/${DOMAIN}" >/dev/null
  echo "Updated /etc/resolver/${DOMAIN} to use 127.0.0.1"
done

# Start or reload dnsmasq
if ! sudo "${brew_bin}" services list | awk 'NR>1{print $1,$2}' | grep -q "^dnsmasq "; then
  echo "Starting dnsmasq via brew services..."
  sudo "${brew_bin}" services start dnsmasq
else
  echo "Reloading dnsmasq via brew services..."
  sudo "${brew_bin}" services reload dnsmasq || sudo "${brew_bin}" services restart dnsmasq
fi

# Flush macOS DNS caches to avoid stale results after IP change
if command -v dscacheutil >/dev/null 2>&1; then
  sudo dscacheutil -flushcache || true
fi
if pgrep -x mDNSResponder >/dev/null 2>&1; then
  sudo killall -HUP mDNSResponder || true
fi

echo "✅ Domains now resolve to ${IP}. Test: ping -c1 ${DOMAINS[0]} and ping -c1 app.${DOMAINS[0]}"
if [[ -n "${TS_IP}" ]]; then
  echo "ℹ️ Tailscale detected. dnsmasq also listens on ${TS_IP}. You can point other Tailscale devices' DNS to ${TS_IP}."
fi
